#include "../include/cuda_main.h"
#include "../include/gpuerrors.h"
#include "../include/gputimer.h"
#include <iostream>
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <cstring>





// define our functions ======================================
void fill(float* data, int size);
dim3 getDimGrid(const int n); 
dim3 getDimBlock(const int n); 
__global__ void kernelFunc(double* X_reald, 
						   double* X_imagd,
						   double* R_reald,
						   double* R_imagd,
						   double* Ss_reald,
						   double* Ss_imagd,
						   double* s_reald,
						   double* s_imagd,
						   double* alpha_reald,
						   double* outputd
						   );
void print_matrix(char* name, double* data, int size);
// ==========================================================


// main body
void gpuKernel(double* X_real, 
			   double* X_imag, 
			   double* R_real, 
			   double* R_imag, 
			   double* Ss_real, 
			   double* Ss_imag, 
			   double* s_real, 
			   double* s_imag,
			   double* alpha_real,
			   double* output
			   ) {
	
	// print name of device
	struct cudaDeviceProp p;
    cudaGetDeviceProperties(&p, 0);
    printf("Device Name: %s\n", p.name);


	// define our variabels
	int X_size = 286; 
	int R_row = 13; 
	int R_col = 13; 
	int Ss_size = 25; 
	int s_size = 13; 
	int print_flag = 1; 

	// allocate memory in CPU for calculation

	// define our needed variables in GPU
	double* X_reald;
	double* X_imagd; 
	double* R_reald;
	double* R_imagd; 
	double* Ss_reald; 
	double* Ss_imagd; 
	double* s_reald; 
	double* s_imagd;
	double* alpha_reald;

	double* outputd; 


	// allocation memory in GPU
	HANDLE_ERROR(cudaMalloc((void**)&X_reald, X_size * sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&X_imagd, X_size * sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&R_reald, R_row * R_col * sizeof(double))); 
	HANDLE_ERROR(cudaMalloc((void**)&R_imagd, R_row * R_col * sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&Ss_reald, Ss_size * R_row * R_col * sizeof(double))); 
	HANDLE_ERROR(cudaMalloc((void**)&Ss_imagd, Ss_size * R_row * R_col * sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&s_reald, s_size * sizeof(double)));
	HANDLE_ERROR(cudaMalloc((void**)&s_imagd, s_size * sizeof(double))); 
	HANDLE_ERROR(cudaMalloc((void**)&alpha_reald, 1 * sizeof(double))); // hard_code: 1 - ch..

	HANDLE_ERROR(cudaMalloc((void**)&outputd, 262 * 13 * 13 * sizeof(double))); // hard_code: 262 - change it in future

	// copy array from CPU to GPU
	HANDLE_ERROR(cudaMemcpy(X_reald, X_real, X_size * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(X_imagd, X_imag, X_size * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(R_reald, R_real, R_row * R_col * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(R_imagd, R_imag, R_row * R_col * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(Ss_reald, Ss_real, Ss_size * R_row * R_col * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(Ss_imagd, Ss_imag, Ss_size * R_row * R_col * sizeof(double), cudaMemcpyHostToDevice));
	HANDLE_ERROR(cudaMemcpy(s_reald, s_real, s_size * sizeof(double), cudaMemcpyHostToDevice)); 
	HANDLE_ERROR(cudaMemcpy(s_imagd, s_imag, s_size * sizeof(double), cudaMemcpyHostToDevice)); 
	HANDLE_ERROR(cudaMemcpy(alpha_reald, alpha_real, 1 * sizeof(double), cudaMemcpyHostToDevice)); // hard_code: 1 - ch..

	
	// define our threads and blocks dimension
	dim3 dimGrid = getDimGrid(1);
	dim3 dimBlock = getDimBlock(1);

	// transfer processing in CUDA
	double gpu_kernel_time = 0.0;
	GpuTimer timer;
    timer.Start();
	kernelFunc<<< dimGrid,dimBlock >>>(X_reald, X_imagd, R_reald, R_imagd, Ss_reald, Ss_imagd, s_reald, s_imagd, alpha_reald, outputd);
	timer.Stop();
	gpu_kernel_time = timer.Elapsed();

	// copy result from GPU to CPU memory
	HANDLE_ERROR(cudaMemcpy(output, outputd, 262 * 13 * 13 * sizeof(double), cudaMemcpyDeviceToHost));
	


	// print report

	if (print_flag) {
		std::cout << "this is output of GPU: " << std::endl; 
		char name[20] = "a"; 
		//print_matrix(name, a		 , n);

		strcpy(name, "output"); 
		print_matrix(name, output, 13 * 13, 2 * 169); 
		
	}


	// remove array in GPU
	HANDLE_ERROR(cudaFree(X_reald));
	HANDLE_ERROR(cudaFree(X_imagd));
	HANDLE_ERROR(cudaFree(R_reald));
	HANDLE_ERROR(cudaFree(R_imagd));
	HANDLE_ERROR(cudaFree(Ss_reald));
	HANDLE_ERROR(cudaFree(Ss_imagd));
	HANDLE_ERROR(cudaFree(s_reald));
	HANDLE_ERROR(cudaFree(s_imagd));
	HANDLE_ERROR(cudaFree(alpha_reald));
	HANDLE_ERROR(cudaFree(outputd));



	// print a report
	std::cout << "I am in gpuKernel .." << std::endl;


}



// define our functions
//void fill(float* data, int size) {
//    for (int i=0; i<size; ++i)
//        data[i] = (float) (rand() % 17 - 8);
//}

// 
dim3 getDimGrid(const int n) {
	dim3 dimGrid(1, 1, 1);

	return dimGrid;
}

//
dim3 getDimBlock(const int n) {
	dim3 dimBlock(262, 1, 1);

	return dimBlock;
}

// kernelFunc
__global__ void kernelFunc(double* X_reald, 
						   double* X_imagd,
						   double* R_reald,
						   double* R_imagd,
						   double* Ss_reald,
						   double* Ss_imagd,
						   double* s_reald,
						   double* s_imagd,
						   double* alpha_reald,
						   double* outputd
						   ) {
	

	// define our variables
	// !!!!! Please consider that if your input data will be big 
	// you may need to use long format of variables !!!!!!!!!!!!
	__shared__ double rho_reald[262]; // hard_code: 262 - change it in future
	__shared__ double rho_imagd[262]; // hard_code: 262 - change it in future

	__shared__ float Ss_reald_shr[25 * 13 * 13]; 
	__shared__ float Ss_imagd_shr[25 * 13 * 13]; 
 

	// define index of each thread
	long long i;
	i = (blockIdx.z * gridDim.y * gridDim.x) + (blockIdx.y * gridDim.x) + (blockIdx.x);
	i *= blockDim.z * blockDim.y * blockDim.x;
	i += (threadIdx.z * blockDim.y * blockDim.x) + (threadIdx.y * blockDim.x) + (threadIdx.x);


	// create rho varibel in shared memory
	if (i < 262) {               // hard_code: 262 - change it in future
		double my_angle = atan2(X_imagd[i], X_reald[i]); 
		double my_radius = sqrt(X_imagd[i] * X_imagd[i] + X_reald[i] * X_reald[i]); 
		my_radius = pow(my_radius, alpha_reald[0]); 
		my_angle *= alpha_reald[0]; 

		rho_reald[i] = my_radius * cos(my_angle); 
		rho_imagd[i] = my_radius * sin(my_angle); 
	}

	// transfer Ss matrices in shared memory
	if (i < 13 * 13) {
		for (int count1 = 0; count1 < 25; ++count1) {
			Ss_reald_shr[count1 * 169 + i] = Ss_reald[count1 * 169 + i]; 
			Ss_imagd_shr[count1 * 169 + i] = Ss_imagd[count1 * 169 + i]; 
		}
	}
	
	// wait till all the data is ready
	__syncthreads(); 

	//
	if ((i >= 12) && (i <= 250)) {          // hard_code: 12 & 250 - ch..
		for (int count1 = 0; count1 < 25; ++count1) {
			for (int count2 = 0; count2 < 13; ++count2) {
				for (int count3 = 0; count3 < 13; ++count3) {
				//	C_reald_shr[i * 169 + count2 * 13 + count3] += (rho_reald[i - 12 + count1] * Ss_reald_shr[count1 * 169 + count2 * 13 + count3]);
				//											      - rho_imagd[i - 12 + count1] * Ss_imagd_shr[count1 * 169 + count2 * 13 + count3]); 
				//	C_imagd_shr[i * 169 + count2 * 13 + count3] += (rho_reald[i - 12 + count1] * Ss_imagd_shr[count1 * 169 + count2 * 13 + count3]
				//												  + rho_imagd[i - 12 + count1] * Ss_reald_shr[count1 * 169 + count2 * 13 + count3]);

					outputd[(i-12) * 169 + count2 * 13 + count3] += rho_reald[i - 12 + count1] * Ss_reald_shr[count1 * 169 + count2 * 13 + count3];
					outputd[(i-12) * 169 + count2 * 13 + count3] -= rho_imagd[i - 12 + count1] * Ss_imagd_shr[count1 * 169 + count2 * 13 + count3]; 
				}
			}
		}
	}






}


// print matrix
void print_matrix(char* name, double* data, int size, int d_shift) {
	printf("arr : %s\n", name);
	for (int i=0+d_shift; i<size+d_shift; ++i) {
		printf("%f\n", data[i]); 
	}
	printf("--------------------\n"); 
}
